const fs = require("fs")
let input = fs.readFileSync("index.txt").toString().split("\n")

// class Queue {
//   constructor() {
//     this._arr = []
//   }
//   enqueue(item) {
//     this._arr.push(item)
//   }
//   dequeue() {
//     return this._arr.shift()
//   }
//   getLength(){
//     return this._arr.length
//   }
// }

// let queue = new Queue();

// let MAX=100001;

// let [n,k]=input[0].split(" ").map(Number)

// let visited= new Array(MAX).fill(0)

// function bfs(){
//   queue=new Queue();
//   queue.enqueue(n);

//   while(queue.getLength()!=0){
//     let cur=queue.dequeue();

//     if(cur===k){
//       return visited[cur];
//     }
//     for(let nxt of [cur-1,cur+1,cur*2]){
//       if(nxt<0||nxt>=MAX){
//         continue;  
//       }
//       if(visited[nxt]==0){
//         visited[nxt]=visited[cur]+1;
//         queue.enqueue(nxt)
//       } 
//     } 
//   }
// }

// console.log(bfs())

let [start,end]=input[0].split(" ").map(Number);


class Queue{
  constructor(){
    this._arr=[]
  }
  enqueue(item){
    this._arr.push(item)
  }
  dequeue(){
    return this._arr.shift()
  }
  getLength(){
    return this._arr.length
  }
  
}

const visited=new Array(100001).fill(0)

function bfs(){
  const queue=new Queue()
  queue.enqueue(start)

  while(queue.length !=0){
    const cur= queue.dequeue()

    if(cur==end){
      return visited[cur]
    }
    for(let nxt of [cur-1,cur+1,cur*2]){
      if(nxt<0||nxt>100001){
        continue
      }
      if(visited[nxt]==0){
        visited[nxt]=visited[cur]+1
        queue.enqueue(nxt)
        
      }
      
    }

    
  }

  
}

console.log(bfs())